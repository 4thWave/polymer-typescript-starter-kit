{"version":3,"sources":["my-app.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAU,GAAG,CAoDZ;AApDD,WAAU,GAAG;IAET,MAAM,EAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAC,GAAG,OAAO,CAAC,UAAU,CAAC;IAI/E,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;IAGtC,IAAM,MAAM,GAAZ,YAAa,SAAQ,OAAO,CAAC,OAAO;QAchC,iBAAiB,CAAC,IAAI;YAGlB,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,OAAO,CAAC;YAG5B,MAAM,MAAM,GAAQ,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;YAGlC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACvB,MAAM,CAAC,KAAK,EAAE,CAAC;YACnB,CAAC;QACL,CAAC;QAGD,YAAY,CAAC,IAAI;YAEb,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC;YAChE,OAAO,CAAC,UAAU,CACd,eAAe,EACf,IAAI,EACJ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAC5B,IAAI,CAAC,CAAC;QACd,CAAC;QAED,YAAY;YACR,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;QAC1B,CAAC;KACJ,CAAA;IArCG;QAHC,QAAQ,CAAC;YACN,kBAAkB,EAAE,IAAI;SAC3B,CAAC;;wCACW;IASb;QADC,OAAO,CAAC,gBAAgB,CAAC;;;;mDAazB;IAGD;QADC,OAAO,CAAC,MAAM,CAAC;;;;8CASf;IArCC,MAAM;QADX,aAAa,CAAC,QAAQ,CAAC;OAClB,MAAM,CA0CX;AACL,CAAC,EApDS,GAAG,KAAH,GAAG,QAoDZ","file":"my-app.js","sourcesContent":["namespace App {\n\n    const {customElement, property, query, queryAll, observe} = Polymer.decorators;\n\n    // Gesture events like tap and track generated from touch will not be\n    // preventable, allowing for better scrolling performance.\n    Polymer.setPassiveTouchGestures(true);\n\n    @customElement('my-app')\n    class MayApp extends Polymer.Element {\n\n        @property({\n            reflectToAttribute: true\n        })\n        page: string;\n        routeData: any;\n        subroute: string;\n        // This shouldn't be neccessary, but the Analyzer isn't picking up\n        // Polymer.Element#rootPath\n        rootPath: string;\n\n\n        @observe('routeData.page')\n        _routePageChanged(page) {\n            // If no page was found in the route data, page will be an empty string.\n            // Default to 'view1' in that case.\n            this.page = page || 'view1';\n\n            // TODO: Add types for drawer when available\n            const drawer: any = this.$.drawer;\n\n            // Close a non-persistent drawer when the page & route are changed.\n            if (!(drawer).persistent) {\n                drawer.close();\n            }\n        }\n\n        @observe('page')\n        _pageChanged(page) {\n            // Load page import on demand. Show 404 page if fails\n            const resolvedPageUrl = this.resolveUrl('my-' + page + '.html');\n            Polymer.importHref(\n                resolvedPageUrl,\n                null,\n                this._showPage404.bind(this),\n                true);\n        }\n\n        _showPage404() {\n            this.page = 'view404';\n        }\n    }\n}\n"]}